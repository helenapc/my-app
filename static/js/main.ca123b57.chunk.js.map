{"version":3,"sources":["components/BtnModal.tsx","components/Modal.tsx","components/Card.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["BtnModal","props","onClick","open","Modal","Card","useState","data","map","e","className","id","src","alt","description","Math","round","price","type","App","isOpen","setIsOpen","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"s5BAiBeA,G,YARE,SAACC,GACd,OACI,8BACI,wBAAQC,QAAS,kBAAQD,EAAME,MAA/B,0BCGGC,EATD,SAACH,GACX,OAAKA,EAAME,KAEP,8BACI,wCAHgB,M,OCmBbE,EAtBF,WACX,IADsB,EAEJC,mBAASC,GAE3B,OAJsB,oBAIPC,KAAI,SAACC,GAAD,OACjB,sBAAgBC,UAAU,OAA1B,UAEE,kCAAKD,EAAEE,MACP,qBAAKC,IAAK,QAAUH,EAAEE,GAAK,OAAQE,IAAI,MAEvC,4BAAIJ,EAAEK,cACN,kCAAKC,KAAKC,MAAMP,EAAEQ,MAVK,GAUIR,EAAEQ,MAAsB,QACnD,mCAAMF,KAAKC,MAAMP,EAAEQ,OAAnB,OACA,kCAZuB,GAYvB,OAEA,wBAAQC,KAAK,SAASR,UAAU,WAAhC,uBAVQD,EAAEE,QCeDQ,MAff,WAAgB,IAAD,EACeb,oBAAS,GADxB,mBACNc,EADM,KACEC,EADF,KAGb,OACE,gCACE,cAAC,EAAD,CAAUlB,KAAMiB,IAChB,wBAAQlB,QAAS,kBAAMmB,GAAWD,IAAlC,uBACA,cAAC,EAAD,CAAOjB,KAAMiB,IACb,qBAAKV,UAAU,cAAf,SACE,cAAC,EAAD,UCNFY,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,UAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,UAAN,sBAEPxC,IAgEV,SAAiCO,EAAeC,GAE9CoC,MAAMrC,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BjC,MAAK,SAACkC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMvC,MAAK,SAACC,GAClCA,EAAauC,aAAaxC,MAAK,WAC7BV,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMvC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OEpC/B+C,GAKA7B,M","file":"static/js/main.ca123b57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n// BUSCAR COMO USAR Y MANEJAR OTROS ESTADOS DESDE DIFERENTES ARCHIVOS\r\n\r\ninterface IBtnModal{\r\n    open:Boolean;\r\n}\r\n\r\nconst BtnModal = (props:IBtnModal) => {\r\n    return (\r\n        <div>\r\n            <button onClick={() => (!props.open)}>Modallll</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BtnModal;\r\n","import React from 'react'\r\n\r\ninterface IModal{\r\n    open:Boolean;\r\n}\r\n\r\nconst Modal = (props: IModal) => {\r\n    if (!props.open) return null;\r\n    return (\r\n        <div>\r\n            <h1>hola</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","// @ts-check\r\nimport React, { useState } from \"react\";\r\nimport data from \"../data.json\";\r\n\r\nconst Card = (): any => {\r\n  const porcentaje: number = 10;\r\n  const [newData] = useState(data);\r\n\r\n  return newData.map((e) => (\r\n    <div key={e.id} className=\"card\">\r\n      {/* <p>Diamantina</p> */}\r\n      <p>#{e.id}</p>\r\n      <img src={\"/img/\" + e.id + \".png\"} alt=\" \" />\r\n      {/* <img src={\"/img/\" + e.id + \".png\"} alt=\"dasd \" /> */}\r\n      <p>{e.description}</p>\r\n      <p>${Math.round(e.price - (e.price * porcentaje) / 100)}</p>\r\n      <p>(${Math.round(e.price)})</p>\r\n      <p>-{porcentaje}%</p>\r\n\r\n      <button type=\"submit\" className=\"btn-shop\">\r\n        Comprar\r\n      </button>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Card;\r\n","// @ts-check\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"./components/Card.css\";\nimport BtnModal from \"./components/BtnModal\";\nimport Modal from \"./components/Modal\";\nimport Card from \"./components/Card\";\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <BtnModal open={isOpen} />\n      <button onClick={() => setIsOpen(!isOpen)}>Modal(OK)</button>\n      <Modal open={isOpen} />\n      <div className=\"items-cards\">\n        <Card />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}